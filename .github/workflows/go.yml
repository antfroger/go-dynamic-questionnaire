name: Go CI
permissions:
  contents: read

on: push

jobs:
  go-versions:
    name: Determine Go versions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
      latest: ${{ steps.versions.outputs.latest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Get Go versions
        id: versions
        uses: arnested/go-version-action@v1

  check:
    name: Go checks
    runs-on: ubuntu-latest
    needs: go-versions

    steps:
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ needs.go-versions.outputs.latest }}

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Verify dependencies
        run: go mod verify

      - name: Check go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod
          git diff --exit-code go.sum

      - name: Run go vet
        run: go vet ./...

      - name: Check go fmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            echo "Please run 'gofmt -s -w .' to format them."
            exit 1
          fi

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  test:
    strategy:
      matrix:
        go-version: ${{ fromJSON(needs.go-versions.outputs.matrix) }}
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    needs: go-versions

    steps:
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Test
        run: go test -race -v ./...
